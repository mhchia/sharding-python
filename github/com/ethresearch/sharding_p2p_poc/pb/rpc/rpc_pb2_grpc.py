# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from github.com.ethresearch.sharding_p2p_poc.pb.rpc import rpc_pb2 as github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2


class PocStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AddPeer = channel.unary_unary(
        '/proto.rpc.Poc/AddPeer',
        request_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCAddPeerRequest.SerializeToString,
        response_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.FromString,
        )
    self.SubscribeShard = channel.unary_unary(
        '/proto.rpc.Poc/SubscribeShard',
        request_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCSubscribeShardRequest.SerializeToString,
        response_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.FromString,
        )
    self.UnsubscribeShard = channel.unary_unary(
        '/proto.rpc.Poc/UnsubscribeShard',
        request_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCUnsubscribeShardRequest.SerializeToString,
        response_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.FromString,
        )
    self.GetSubscribedShard = channel.unary_unary(
        '/proto.rpc.Poc/GetSubscribedShard',
        request_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCGetSubscribedShardRequest.SerializeToString,
        response_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCGetSubscribedShardResponse.FromString,
        )
    self.BroadcastCollation = channel.unary_unary(
        '/proto.rpc.Poc/BroadcastCollation',
        request_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCBroadcastCollationRequest.SerializeToString,
        response_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.FromString,
        )
    self.SendCollation = channel.unary_unary(
        '/proto.rpc.Poc/SendCollation',
        request_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCSendCollationRequest.SerializeToString,
        response_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.FromString,
        )
    self.StopServer = channel.unary_unary(
        '/proto.rpc.Poc/StopServer',
        request_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCStopServerRequest.SerializeToString,
        response_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.FromString,
        )


class PocServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def AddPeer(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeShard(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnsubscribeShard(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSubscribedShard(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BroadcastCollation(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendCollation(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StopServer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PocServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AddPeer': grpc.unary_unary_rpc_method_handler(
          servicer.AddPeer,
          request_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCAddPeerRequest.FromString,
          response_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.SerializeToString,
      ),
      'SubscribeShard': grpc.unary_unary_rpc_method_handler(
          servicer.SubscribeShard,
          request_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCSubscribeShardRequest.FromString,
          response_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.SerializeToString,
      ),
      'UnsubscribeShard': grpc.unary_unary_rpc_method_handler(
          servicer.UnsubscribeShard,
          request_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCUnsubscribeShardRequest.FromString,
          response_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.SerializeToString,
      ),
      'GetSubscribedShard': grpc.unary_unary_rpc_method_handler(
          servicer.GetSubscribedShard,
          request_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCGetSubscribedShardRequest.FromString,
          response_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCGetSubscribedShardResponse.SerializeToString,
      ),
      'BroadcastCollation': grpc.unary_unary_rpc_method_handler(
          servicer.BroadcastCollation,
          request_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCBroadcastCollationRequest.FromString,
          response_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.SerializeToString,
      ),
      'SendCollation': grpc.unary_unary_rpc_method_handler(
          servicer.SendCollation,
          request_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCSendCollationRequest.FromString,
          response_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.SerializeToString,
      ),
      'StopServer': grpc.unary_unary_rpc_method_handler(
          servicer.StopServer,
          request_deserializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCStopServerRequest.FromString,
          response_serializer=github_dot_com_dot_ethresearch_dot_sharding__p2p__poc_dot_pb_dot_rpc_dot_rpc__pb2.RPCPlainResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'proto.rpc.Poc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
